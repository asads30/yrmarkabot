const { Telegraf } = require('telegraf');
const { Markup } = Telegraf
const session = require('telegraf/session')
const data = require('./data')
const texts = require('./texts')
const mysql = require('mysql')
const axios = require('axios')
const express = require("express")
const app = express()
const cors = require('cors')
app.use('/static', express.static('photo'))
app.use(cors({
    origin: '*'
}))
const bot = new Telegraf(data.token)
var https = require('https'),     
    http = require('http'), 
    Stream = require('stream').Transform,                                  
    fs = require('fs')
var con = mysql.createConnection({
    host: "localhost",
    database: "telegram",
    user: "root",
    password: "root",
    charset: "utf8mb4_general_ci"
})
con.connect(function(err) {
    if (err) throw err;
})
function isNumeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}
const text2 = `‚òÄÔ∏è –ß—Ç–æ–±—ã —è —Å–º–æ–≥ —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –∫–∞–Ω–∞–ª –µ—â–µ –∫—Ä—É—á–µ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:

1) –î–æ–±–∞–≤—å @Yrmarkabot –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞
2) –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ –∞–¥—Ä–µ—Å (username –∏–ª–∏ —Å—Å—ã–ª–∫—É) —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞`
const text4 = `‚úÖ–Ø –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª: –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã—à–µ–ª. 

–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π

/add_product - –°–æ–∑–¥–∞—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä
/my_channels - –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª
/my_orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã
/payment - –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤`
bot.use(session())
bot.start((ctx) => {
    const user_id = ctx.from.id
    const first_name = ctx.from.first_name
    const last_name = ctx.from.last_name
    const username = ctx.from.username

    // –¢–ï–ö–°–¢–ê
    const text1 = `üòä –ü—Ä–∏–≤–µ—Ç, ${first_name}! –†–∞–∑—Ä–µ—à–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è: —è ‚Äì –ø–æ–ª–µ–∑–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞. –ù–∞ –º–µ–Ω—è —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω–æ –±–æ–ª–µ–µ 1 000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò —è —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å—Ä–µ–¥–∏ –Ω–∏—Ö. üòâ –Ø —É–º–µ—é:
    
üìç –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —Ç–≤–æ–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ
üìç –ü—Ä–∏–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—É –ø—Ä—è–º–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º, –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ–¥–∞–µ—à—å —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏
    
–ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ? –¢–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å—Ç–∞—Ç—å –∏ —Ç–≤–æ–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º üöÄüöÄüöÄ
    
/add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª`

    con.query(`UPDATE users SET step = '0' WHERE user_id = ${user_id}`)

    con.query(`SELECT * FROM users WHERE user_id=${user_id}`, function (err, result, fields) {

        const current_user = result[0]

        con.query(`SELECT address FROM channels WHERE author = ${user_id}`, function (err, result, fields) {

            const current_user_channels = result;

            if(current_user?.id === undefined){
                con.query(`INSERT INTO users (user_id, first_name, last_name, username, role, balance, step) VALUES (?, ?, ?, ?, ?, ?, ?)`, [user_id, first_name, last_name, username, 'author', 0, 0])
                ctx.replyWithPhoto(`https://wpaka.uz/photo/01.jpg`, {
                    caption: text1,
                    reply_markup: {
                        "inline_keyboard": [
                            [
                                {
                                    "text": "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                                    "callback_data": "add_channel"            
                                }
                            ]
                        ],
                        remove_keyboard: true
                    }
                })
            } else if(current_user_channels === undefined){
                ctx.replyWithPhoto('https://wpaka.uz/photo/01.jpg', {
                    caption: text1,
                    reply_markup: {
                        "inline_keyboard": [
                            [
                                {
                                    "text": "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                                    "callback_data": "add_channel"
                                }
                            ]
                        ],
                        remove_keyboard: true
                    }
                })
            } else {
                ctx.replyWithPhoto('https://wpaka.uz/photo/02.jpg', {
                    caption: texts.txt1,
                    reply_markup: {
                        remove_keyboard: true
                    }
                })
            }
        })
    })
})

bot.on('text', async (ctx, next) => {

    const user_id = ctx.from.id
    const current_text = ctx.message.text
    const first_name = ctx.from.first_name
    const last_name = ctx.from.last_name
    const username = ctx.from.username

    // –¢–ï–ö–°–¢–ê
    const text1 = `üòä –ü—Ä–∏–≤–µ—Ç, ${first_name}! –†–∞–∑—Ä–µ—à–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è: —è ‚Äì –ø–æ–ª–µ–∑–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞. –ù–∞ –º–µ–Ω—è —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω–æ –±–æ–ª–µ–µ 1 000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò —è —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å—Ä–µ–¥–∏ –Ω–∏—Ö. üòâ –Ø —É–º–µ—é:
        
üìç –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —Ç–≤–æ–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ
üìç –ü—Ä–∏–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—É –ø—Ä—è–º–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º, –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ–¥–∞–µ—à—å —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏
    
–ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ? –¢–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å—Ç–∞—Ç—å –∏ —Ç–≤–æ–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º üöÄüöÄüöÄ
    
/add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª`
    const text3 = `üëâüèª –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? 
    
–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ –∫–∞–Ω–∞–ª–µ.
            
–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è - –≤—ã–±–∏—Ä–∞–π –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏ –Ω–∞ —Ç–≤–æ–µ–º –∫–∞–Ω–∞–ª–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ç–æ–≤–∞—Ä üëåüèª`

    con.query(`SELECT * FROM users WHERE user_id=${user_id}`, function (err, result, fields) {

        const current_user = result[0]

        con.query(`SELECT address FROM channels WHERE author = ${user_id}`, function (err, result, fields) {

            const current_user_channels = result;

            if(current_user?.id === undefined){
                con.query(`INSERT INTO users (user_id, first_name, last_name, username, role, balance, step) VALUES (?, ?, ?, ?, ?, ?, ?)`, [user_id, first_name, last_name, username, 'author', 0, 0])
                ctx.replyWithPhoto('https://wpaka.uz/photo/01.jpg', {
                    caption: text1,
                    reply_markup: {
                        "inline_keyboard": [
                            [
                                {
                                    "text": "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                                    "callback_data": "add_channel"            
                                }
                            ]
                        ],
                        remove_keyboard: true
                    }
                })
            } else if(current_user.step != 1 && current_user_channels === undefined){
                ctx.replyWithPhoto('https://wpaka.uz/photo/01.jpg', {
                    caption: text1,
                    reply_markup: {
                        "inline_keyboard": [
                            [
                                {
                                    "text": "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                                    "callback_data": "add_channel"            
                                }
                            ]
                        ],
                        remove_keyboard: true
                    }
                })
            } else if(current_text == '/add_product'){
                ctx.replyWithPhoto('https://wpaka.uz/photo/04.jpg', {
                    caption: 'üëåüèª –î–∞–≤–∞–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤!',
                    reply_markup: {
                        "inline_keyboard": [
                            [
                                {
                                    "text": "–ù–∞—á–∞—Ç—å",
                                    "callback_data": "add_product"            
                                }
                            ]
                        ],
                        remove_keyboard: true
                    }
                })
            } else if(current_text == '/payment'){
                ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å: ${current_user.balance}`, {
                    reply_markup: {
                        "inline_keyboard": [
                            [
                                {
                                    "text": "–ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É",
                                    "callback_data": "go_payment"
                                }
                            ]
                        ],
                        remove_keyboard: true
                    }
                })
            } else if(current_text == '/my_orders'){
                con.query(`SELECT * FROM payments WHERE user_id = ${user_id}`, function (err, result, fields) {
                    if(result[0]){
                        result.forEach(element => {
                            ctx.reply(`–ü–ª–∞—Ç–µ–∂ ‚Ññ${element.id}, ID –ø–æ—Å—Ç–∞: ${element.post_id}, –¶–µ–Ω–∞: ${element.amount/100}`, {
                                reply_markup: {
                                    hide_keyboard: true
                                }
                            })
                            
                        });
                    } else {
                        ctx.reply('–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç', {
                            reply_markup: {
                                hide_keyboard: true
                            }
                        })
                    }
                })
            } else if(current_text == '/my_channels'){
                let channels = [];
                current_user_channels.forEach(element => {
                    channels.push(element.address)
                });
                let my_channels = channels.join(`
`);
                let text = `‚òÄÔ∏è –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:

${my_channels}`;
                ctx.replyWithMarkdown(text, {
                    reply_markup: {
                        "inline_keyboard": [
                            [
                                {
                                    "text": "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ",
                                    "callback_data": "add_channel"
                                }
                            ]
                        ],
                        remove_keyboard: true
                    }
                })
            } else if(current_text == '/add_channel'){
                con.query(`UPDATE users SET step = 1 WHERE user_id = ${user_id}`)
                ctx.replyWithMarkdown(text2, {
                    reply_markup: {
                        remove_keyboard: true
                    }
                })
            } else if(current_user.step == 1){
                let text = ctx.message.text,
                channel
    
                if(text){
                    if ( text.includes('https://t.me/') ) {
                        channel = text.split('https://t.me/').join('@')
                    } else if( text.includes('http://t.me/') ){
                        channel = text.split('http://t.me/').join('@')
                    } else {
                        channel = text
                    }
                    ctx.telegram.getChatAdministrators(channel).then(res => {
                        let isAdmin = false
                        res.forEach(admins => {
                            if(admins.user.id == user_id){
                                isAdmin = true
                            }
                        })
                        if(isAdmin === true){
                            con.query(`INSERT INTO channels (address, author) VALUES (?, ?)`, [channel, user_id])

                            con.query(`UPDATE users SET step = '0' WHERE user_id = ${user_id}`)

                            axios.get(`https://api.telegram.org/bot${data.token}/getUpdates`).then()

                            ctx.replyWithPhoto('https://wpaka.uz/photo/02.jpg', {
                                caption: texts.txt1,
                                reply_markup: {
                                    remove_keyboard: true
                                }
                            })
                        } else {
                            ctx.reply('üòï –ò–∑–≤–∏–Ω–∏, –Ω–æ —è –ø–æ—á–µ–º—É‚Äì—Ç–æ –Ω–µ –≤–∏–∂—É —Ç–µ–±—è —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –û—Ç–ø—Ä–∞–≤—å –Ω–∞–º –∫–∞–Ω–∞–ª –≥–¥–µ —Ç—ã —è–≤–ª—è–µ—à—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º', {
                                reply_markup: {
                                    remove_keyboard: true
                                }
                            })
                        }
                    }).catch(e => {
                        ctx.reply('üòï –û—à–∏–±–∫–∞: –¢—ã —Ç–æ—á–Ω–æ –¥–æ–±–∞–≤–∏–ª –Ω–∞—à –±–æ—Ç –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞? –õ–∏–±–æ —Ç—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–º –ø—Ä–∏—Å—ã–ª–∞–µ—à—å –Ω–∞–º –∞–¥—Ä–µ—Å –∫–∞–Ω–∞–ª–∞', {
                            reply_markup: {
                                remove_keyboard: true
                            }
                        })
                    })
                }
            } else if(current_user.step == 2){
                let text = ctx.message.text;
                con.query(`UPDATE posts SET title = ? WHERE id = ${ctx.session.post_id}`, [text]);
                con.query(`UPDATE users SET step = '2-2' WHERE user_id = ${user_id}`);
                ctx.replyWithPhoto('https://wpaka.uz/photo/06.jpg', {
                    caption: '–ú–Ω–µ —Ç–æ–∂–µ –Ω—É–∂–Ω–∞ —Ç–∞–∫–∞—è —à—Ç—É–∫–∞! üòâ –ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º —Ç–æ–≤–∞—Ä–µ –ø–æ–¥—Ä–æ–±–Ω–µ–π. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–º–æ–≥—É—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—ã. üòä –ù–µ –∑–∞–±—É–¥—å: –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 255 —Å–∏–º–≤–æ–ª–æ–≤',
                    reply_markup: {
                        remove_keyboard: true
                    }
                })
            } else if(current_user.step == '2-2'){
                let text = ctx.message.text;
                con.query(`UPDATE posts SET des = ? WHERE id = ${ctx.session.post_id}`, [text]);
                con.query(`UPDATE users SET step = '2-3' WHERE user_id = ${user_id}`);
                ctx.replyWithPhoto('https://wpaka.uz/photo/07.jpg', {
                    caption: 'üëçüèª –û—Ç–ª–∏—á–Ω–æ! –ú–æ–∂–µ—Ç –±—ã—Ç—å, –¥–æ–±–∞–≤–∏–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞? –ó–∞–≥—Ä—É–∑–∏ —Å—é–¥–∞ –æ–¥–Ω—É —Å–∞–º—É—é –ª—É—á—à—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!',
                    reply_markup: {
                        remove_keyboard: true
                    }
                })
            } else if(current_user.step == '2-4'){
                let text = ctx.message.text;
                let check = isNumeric(text);
                if(check === true){
                    ctx.replyWithPhoto('https://wpaka.uz/photo/09.jpg', {
                        caption: text3, reply_markup: {
                            "inline_keyboard": [
                                [
                                    {
                                        "text": "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
                                        "callback_data": "preview_product"            
                                    }
                                ],
                                [
                                    {
                                        "text": "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å",
                                        "callback_data": "push_product"            
                                    }
                                ]
                            ],
                            remove_keyboard: true
                        }
                    })
                    con.query(`UPDATE posts SET price = ? WHERE id = ${ctx.session.post_id}`, [text]);
                    con.query(`UPDATE users SET step = '0' WHERE user_id = ${user_id}`);
                } else {
                    ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã (–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)')
                }
            } else if(current_user.step == '5'){
                let text = ctx.message.text;
                con.query(`UPDATE users SET step = '0' WHERE user_id = ${user_id}`);
                con.query(`UPDATE posts SET channel = ?, status = ? WHERE id = ${ctx.session.post_id}`, [text, 1]);
                con.query(`SELECT * FROM posts WHERE id=${ctx.session.post_id}`, function (err, result, fields) {
                    let post = result[0];
                    const invoice = {
                        chat_id: text,
                        provider_token: data.payment,
                        start_parameter: 'get_access',
                        title: post?.title,
                        description: post?.des,
                        currency: 'RUB',
                        prices: [{ label: post?.title, amount: 100 * post?.price }],
                        photo_url: `https://wpaka.site/bot/01/photo/${post?.image}.jpg`,
                        photo_width: '800',
                        photo_height: '480',
                        need_name: true,
                        need_phone_number: true,
                        need_shipping_address: true,
                        payload: ctx.session.post_id
                    }
                    try {
                        ctx.replyWithInvoice(invoice);
                    } catch (error) {
                    }
                    ctx.reply(text4, {
                        reply_markup: {
                            remove_keyboard: true
                        }
                    })
                });
            }
        })
    });
});

bot.on('photo', async (ctx, next) => {
    const user_id = ctx.message.from.id;
    con.query(`SELECT * FROM users WHERE user_id=${user_id}`, function (err, result, fields) {
        const current_user = result[0]
        if(current_user.step == '2-3'){
            let file_id = ctx.message.photo[2]?.file_id;
            let fileid = ctx.message.photo[2]?.file_unique_id;
            axios.get(`https://api.telegram.org/bot${data.token}/getFile?file_id=${file_id}`).then(res => {
                let file_url = `https://api.telegram.org/file/bot${data.token}/${res.data.result.file_path}`;
                con.query(`UPDATE posts SET image = ? WHERE id = ${ctx.session.post_id}`, [fileid]);
                https.request(file_url, function(response) {                                        
                    var data = new Stream();
                        response.on('data', function(chunk) {                                       
                        data.push(chunk);                                                         
                    });
                    response.on('end', function() {                                             
                        fs.writeFileSync(`./photo/${fileid}.jpg`, data.read(), 'utf-8');
                    });
                }).end();
                con.query(`UPDATE users SET step = '2-4' WHERE user_id = ${user_id}`);
                ctx.replyWithPhoto('https://wpaka.site/photo/07.jpg', {
                    caption: '–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂–µ–º –∏–º, —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ç–æ–∏—Ç. üëåüèª –ù–µ –∑–∞–±—É–¥—å, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ —Ä—É–±–ª—è—Ö üòâ',
                    reply_markup: {
                        remove_keyboard: true
                    }
                })
            });
        }
    })
});

bot.on('document', async (ctx, next) => {
    const user_id = ctx.message.from.id;
    con.query(`SELECT * FROM users WHERE user_id=${user_id}`, function (err, result, fields) {
        const current_user = result[0]
        if(current_user.step == '2-3'){
            let file_id = ctx.message.document[2]?.file_id;
            let fileid = ctx.message.document[2]?.file_unique_id;
            axios.get(`https://api.telegram.org/bot${data.token}/getFile?file_id=${file_id}`).then(res => {
                let file_url = `https://api.telegram.org/file/bot${data.token}/${res.data.result.file_path}`;
                con.query(`UPDATE posts SET image = ? WHERE id = ${ctx.session.post_id}`, [fileid]);
                https.request(file_url, function(response) {                                        
                    var data = new Stream();
                        response.on('data', function(chunk) {                                       
                        data.push(chunk);                                                         
                    });
                    response.on('end', function() {                                             
                        fs.writeFileSync(`./photo/${fileid}.jpg`, data.read(), 'utf-8');
                    });
                }).end();
                con.query(`UPDATE users SET step = '2-4' WHERE user_id = ${user_id}`);
                ctx.replyWithPhoto('https://wpaka.uz/photo/07.jpg', {
                    caption: '–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂–µ–º –∏–º, —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ç–æ–∏—Ç. üëåüèª –ù–µ –∑–∞–±—É–¥—å, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ —Ä—É–±–ª—è—Ö üòâ',
                    reply_markup: {
                        remove_keyboard: true
                    }
                })
            });
        }
    })
});

bot.on('callback_query', (ctx, next) => {
    const user_id = ctx.callbackQuery.from.id;
    con.query(`SELECT * FROM users WHERE user_id=${user_id}`, function (err, result, fields) {
        const current_user = result[0];
        if(ctx.callbackQuery.data == 'add_product'){
            con.query(`INSERT INTO posts (user_id) VALUES (?)`, [user_id], function(err, result, fields) {
                if(!err){
                    con.query(`UPDATE users SET step = 2 WHERE user_id = ${user_id}`);
                    ctx.session.post_id = result.insertId
                }
            });
            try {
                ctx.deleteMessage();
            } catch (error) {
                ctx.reply(error, {
                    reply_markup: {
                        remove_keyboard: true
                    }
                })
            }
            ctx.replyWithPhoto('https://wpaka.uz/photo/05.jpg', {
                caption: '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å',
                reply_markup: {
                    remove_keyboard: true
                }
            })
        } else if(ctx.callbackQuery.data == 'preview_product'){
            try {
                ctx.deleteMessage();
            } catch (error) {
                ctx.reply(error, {
                    reply_markup: {
                        remove_keyboard: true
                    }
                })
            }
            con.query(`UPDATE users SET step = 3 WHERE user_id = ${user_id}`);
            con.query(`UPDATE posts SET status = 0 WHERE id = ${ctx.session.post_id}`);
            con.query(`SELECT * FROM posts WHERE id = ${ctx.session.post_id}`, function (err, result, fields) {
                let post = result[0];
                const invoice = {
                    chat_id: ctx.callbackQuery.from.id,
                    provider_token: data.payment,
                    start_parameter: 'get_access',
                    title: post?.title,
                    description: post?.des,
                    currency: 'RUB',
                    prices: [{ label: post?.title, amount: 100 * post?.price }],
                    photo_url: `https://wpaka.site/bot/01/photo/${post?.image}.jpg`,
                    photo_width: '800',
                    photo_height: '480',
                    need_name: true,
                    need_phone_number: true,
                    need_shipping_address: true,
                    payload: ctx.session.post_id
                }
                try {
                    ctx.replyWithInvoice(invoice);
                } catch (error) {
                }
                setTimeout(() => {
                    ctx.reply('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', {
                        reply_markup: {
                            "inline_keyboard": [
                                [
                                    {
                                        "text": "–î–∞!",
                                        "callback_data": "push_product"            
                                    }
                                ]
                            ],
                            remove_keyboard: true
                        }
                    })
                }, 500);
            });
        } else if(ctx.callbackQuery.data == 'push_product'){
            try {
                ctx.deleteMessage();
            } catch (error) {
                ctx.reply(error, {
                    reply_markup: {
                        remove_keyboard: true
                    }
                })
            }
            con.query(`UPDATE users SET step = 5 WHERE user_id = ${user_id}`);
            con.query(`SELECT address FROM channels WHERE author = ${user_id}`, function (err, result, fields) {
                var channels = [];
                result.forEach(element => {
                    channels.push(element.address)
                });
                ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', {
                    reply_markup: Markup.keyboard(channels)
                })
            });
        } else if(ctx.callbackQuery.data == 'add_channel'){
            try {
                ctx.deleteMessage();
            } catch (error) {
                ctx.reply(error, {
                    reply_markup: {
                        remove_keyboard: true
                    }
                })
            }
            con.query(`UPDATE users SET step = 1 WHERE user_id = ${user_id}`)
            ctx.replyWithMarkdown(text2, {
                reply_markup: {
                    remove_keyboard: true
                }
            })
        } else if(ctx.callbackQuery.data == 'go_payment'){
            if(current_user.balance < 1000){
                ctx.answerCbQuery('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã 1000 —Ä—É–±', true);
            } else {
                ctx.answerCbQuery('–í—ã–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–∞–∑–∞', true);
                ctx.telegram.sendMessage('-1001889076042', `–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç ${user_id}, —Å—É–º–º–∞ - ${current_user.balance}`);
                con.query(`UPDATE users SET balance = 0 WHERE user_id = ${user_id}`);
            }
        }
    })
})

bot.on('pre_checkout_query', async (ctx) => {
    const total = ctx.preCheckoutQuery.total_amount
    const user_id = ctx.preCheckoutQuery.from.id
    const post_id = ctx.preCheckoutQuery.invoice_payload
    const first_name = ctx.preCheckoutQuery.from?.first_name
    const last_name = ctx.preCheckoutQuery.from?.last_name
    const username = ctx.preCheckoutQuery.from?.username
    const phone_number = ctx.preCheckoutQuery.order_info?.phone_number
    con.query(`INSERT INTO payments (post_id, status, user_id, amount, first_name, last_name, username, phone_number) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`, [post_id, 0, user_id, total, first_name, last_name, username, phone_number])
    await ctx.answerPreCheckoutQuery(true)
})
  
bot.on('successful_payment', async (ctx, next) => {
    const post_id = ctx.update.message.successful_payment.invoice_payload
    const amount = ctx.update.message.successful_payment.total_amount / 100;
    con.query(`UPDATE payments SET status = 1 WHERE post_id = ${post_id}`)
    con.query(`SELECT * FROM posts WHERE id=${post_id}`, function (err, result, fields) {
        const res = result[0];
        const amountPersent = amount*0.9;
        con.query(`UPDATE users SET balance=balance+${amountPersent} WHERE user_id = ${res.user_id}`);
        bot.telegram.sendMessage(res.user_id, `–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑ –æ—Ç ${ctx.update.message.successful_payment.order_info.name}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${ctx.update.message.successful_payment.order_info.phone_number}

–î–æ—Å—Ç–∞–≤–∫–∞:
–°—Ç—Ä–∞–Ω–∞: ${ctx.update.message.successful_payment.order_info.shipping_address.country_code}
–û–±–ª–∞—Å—Ç—å: ${ctx.update.message.successful_payment.order_info.shipping_address.state}
–ì–æ—Ä–æ–¥: ${ctx.update.message.successful_payment.order_info.shipping_address.city}
–ê–¥—Ä–µ—Å 1: ${ctx.update.message.successful_payment.order_info.shipping_address.street_line1}
–ê–¥—Ä–µ—Å 2: ${ctx.update.message.successful_payment.order_info.shipping_address.street_line2}
–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: ${ctx.update.message.successful_payment.order_info.shipping_address.post_code}`)
    })
    await ctx.reply('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', {
        reply_markup: {
            remove_keyboard: true
        }
    })
})

bot.launch()

app.get('/users', function (req, res) {
    con.query(`SELECT * FROM users`, function (err, result, fields) {
        res.send(result);
    })
});

app.get('/posts', function (req, res) {
    con.query(`SELECT * FROM posts`, function (err, result, fields) {
        res.send(result);
    })
});

app.get('/payments', function (req, res) {
    con.query(`SELECT * FROM payments`, function (err, result, fields) {
        res.send(result);
    })
});

app.get('/channels', function (req, res) {
    con.query(`SELECT * FROM channels`, function (err, result, fields) {
        res.send(result);
    })
});

var httpServer = http.createServer(app);
httpServer.listen(3000);